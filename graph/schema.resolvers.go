package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/reginbald/gqlgen-dataloader-subscription/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	id, err := uuid.NewUUID()
	if err != nil {
		return nil, err
	}

	user, ok := r.Users[input.UserID]
	if !ok {
		user = &model.User{ID: input.UserID, Name: "user " + input.UserID}
		r.Users[input.UserID] = user
	}

	todo := &model.Todo{
		Text: input.Text,
		ID:   id.String(),
		User: user,
	}
	r.Todos[id.String()] = todo
	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodo) (*model.Todo, error) {
	todo, ok := r.Todos[input.ID]
	if !ok {
		return nil, fmt.Errorf("not found")
	}

	user, ok := r.Users[input.UserID]
	if !ok {
		user = &model.User{ID: input.UserID, Name: "user " + input.UserID}
		r.Users[input.UserID] = user
	}

	todo.Text = input.Text
	todo.Done = input.Done
	todo.User = user

	r.Todos[todo.ID] = todo
	return todo, nil
}

// GetTodo is the resolver for the getTodo field.
func (r *queryResolver) GetTodo(ctx context.Context, id string) (*model.Todo, error) {
	todo, ok := r.Todos[id]
	if !ok {
		return nil, fmt.Errorf("not found")
	}
	return todo, nil
}

// Todo is the resolver for the todo field.
func (r *subscriptionResolver) Todo(ctx context.Context, id string) (<-chan *model.Todo, error) {
	if _, ok := r.Todos[id]; !ok {
		return nil, fmt.Errorf("not found")
	}
	ch := make(chan *model.Todo)

	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			currentTime := time.Now()

			for _, user := range r.Users {
				r.Users[user.ID] = &model.User{
					ID:   user.ID,
					Name: fmt.Sprintf("user %s %d", user.ID, int(currentTime.Unix())),
				}
			}

			t := r.Todos[id]

			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				return

			case ch <- t:
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	user, ok := r.Users[obj.User.ID]
	if !ok {
		return nil, fmt.Errorf("not found")
	}

	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
