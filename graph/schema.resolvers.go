package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"time"

	"github.com/reginbald/gqlgen-dataloader-subscription/graph/model"
	"github.com/reginbald/gqlgen-dataloader-subscription/loaders"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo, err := r.Repo.CreateTodo(input.Text, false, input.UserID)
	if err != nil {
		return nil, err
	}
	return &model.Todo{
		ID:   todo.ID.String(),
		Text: todo.Text,
		Done: todo.Done,
		User: &model.User{
			ID:   todo.User.ID.String(),
			Name: "", // resolver
		},
	}, nil
}

// GetTodo is the resolver for the getTodo field.
func (r *queryResolver) GetTodo(ctx context.Context, id string) (*model.Todo, error) {
	todo, err := r.Repo.GetTodo(id)
	if err != nil {
		return nil, err
	}
	return &model.Todo{
		ID:   id,
		Text: todo.Text,
		Done: todo.Done,
		User: &model.User{
			ID:   todo.User.ID.String(),
			Name: "", // resolver
		},
	}, nil
}

// Todo is the resolver for the todo field.
func (r *subscriptionResolver) Todo(ctx context.Context, id string) (<-chan *model.Todo, error) {

	if _, err := r.Repo.GetTodo(id); err != nil {
		return nil, err
	}
	ch := make(chan *model.Todo)

	go func() {
		// Handle deregistration of the channel here. Note the `defer`
		defer close(ch)

		for {
			// In our example we'll send the current time every second.
			time.Sleep(1 * time.Second)

			t, err := r.Repo.GetTodo(id)
			if err != nil {
				fmt.Println("Store returned an error: %w", err)
				return
			}

			select {
			case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
				fmt.Println("Subscription Closed")
				return

			case ch <- &model.Todo{
				ID:   id,
				Text: t.Text,
				Done: t.Done,
				User: &model.User{
					ID:   t.User.ID.String(),
					Name: "", // resolver
				},
			}:
			}
		}
	}()

	// We return the channel and no error.
	return ch, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	loaders := loaders.For(ctx)
	return loaders.UserLoader.Load(ctx, obj.User.ID)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
